package info.novatec.testit.livingdoc.runner;

import static info.novatec.testit.livingdoc.util.URIUtil.flatten;

import java.io.File;
import java.util.Locale;

import info.novatec.testit.livingdoc.LivingDoc;
import info.novatec.testit.livingdoc.report.FileReportGenerator;
import info.novatec.testit.livingdoc.report.XmlReport;
import info.novatec.testit.livingdoc.repository.DocumentRepository;


/**
 * This class simplifies the programmatically execution of a
 * {@link SpecificationRunner}.
 */
public class SpecificationRunnerExecutor {

    // Mandatory parameters
    private final SpecificationRunner specificationRunner;

    // Optional parameters
    private File outputFile;

    private boolean stopOnFirstFailure;
    private boolean debugEnabled;
    private Locale locale = new Locale("en");

    public SpecificationRunnerExecutor(SpecificationRunner specificationRunner) {
        this.specificationRunner = specificationRunner;
    }

    /**
     * The output file which has to be relative to the output directory. The
     * outputDirectory can be set using the {@link FileReportGenerator} or the
     * {@link SpecificationRunnerBuilder}.
     * 
     * <b>Note:</b> You have to omit the output file if you are running a suite
     * (which does not have a single output file).
     * 
     * <p>
     * Imagine if we have a specification which is placed in a sub folder like
     * this:
     * </p>
     * 
     * <pre>
     * <code>myFolder/a/b/myspec.html</code>
     * </pre>
     * 
     * 
     * <p>
     * After running the specification using the {@link XmlReport}, LivingDoc
     * wil generate the following output file:
     * </p>
     * 
     * <pre>
     * <code>${outputDirectory}/myFolder-a-b-myspec.html.xml</code>
     * </pre>
     * 
     * @param file a writable output file which will be generated in the output
     * directory (should not be set for a suite runner).
     * @see SpecificationRunnerBuilder#outputDirectory(File)
     */
    public SpecificationRunnerExecutor outputFile(File file) {
        if (specificationRunner instanceof SuiteRunner) {
            throw new IllegalArgumentException("A suite runner can not have a concrete output file.");
        }
        this.outputFile = file;
        return this;
    }

    /**
     * Set to true to enable for verbose mode (by default false).
     */
    public SpecificationRunnerExecutor debugEnabled(boolean enabled) {
        this.debugEnabled = enabled;
        return this;
    }

    /**
     * Enables the translation of the output (by default "en").
     * 
     * Currently available are:
     * <ul>
     * <li>en</li>
     * <li>fr</li>
     * </ul>
     * 
     * See also {@code src/main/resources}.
     */
    public SpecificationRunnerExecutor locale(Locale paramLocale) {
        this.locale = paramLocale;
        return this;
    }

    /**
     * Let the specification stop on the first failure (by default false).
     */
    public SpecificationRunnerExecutor stopOnFirstFailure(boolean stop) {
        this.stopOnFirstFailure = stop;
        return this;
    }

    /**
     * This method runs the specification.
     * 
     * @param source The source can be any string and must not be a file on the
     * file system. It will be later used by the {@link DocumentRepository} to
     * load the specification(s).
     */
    public void execute(final String source) {
        initializeLivingDocConstants();

        if (outputFile == null) {
            specificationRunner.getReportGenerator().adjustReportFilesExtensions(true);
        }

        final String destination = determineDestination(source);

        // Run runner, run...
        specificationRunner.run(source, destination);
    }

    private void initializeLivingDocConstants() {
        LivingDoc.setDebugEnabled(debugEnabled);
        LivingDoc.setLocale(locale);
        LivingDoc.setStopOnFirstFailure(stopOnFirstFailure);
    }

    /**
     * @see SpecificationRunnerExecutor#outputFile(File)
     */
    private String determineDestination(String source) {
        String destination;

        if (specificationRunner instanceof SuiteRunner) {
            // A suite does not have any specific output file. The output files
            // are generated by the child document runners in the output
            // directory.
            destination = "";
        } else if (outputFile == null) {
            // No output file given:
            // LivingDoc's old
            // info.novatec.testit.livingdoc.runner.CommandLineRunner has
            // only flatten the filename
            // if a specific repository was set. But in our case it's okay if we
            // place the reports
            // always into one single directory with no sub directories.
            destination = flatten(source);
        } else {
            // Single file destination
            destination = outputFile.getName();
        }
        return destination;
    }

}
